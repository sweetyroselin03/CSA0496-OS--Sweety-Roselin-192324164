#include <stdio.h>
#define MAX 10
struct Process {
    int id;            
    int burst_time;     
    int remaining_time; 
    int completion_time;
    int waiting_time;
    int turnaround_time;
};
void findWaitingTime(struct Process processes[], int n, int quantum) {
    int time = 0;
    int remaining_processes = n;
    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].waiting_time = time - processes[i].burst_time;
                    processes[i].remaining_time = 0;
                    processes[i].completion_time = time;
                    remaining_processes--;
                }
            }
        }
    }
}
void findTurnaroundTime(struct Process processes[], int n) {
    for (int i = 0; i < n; i++) {
        processes[i].turnaround_time = processes[i].completion_time - processes[i].waiting_time;
    }
}
void findAverageTimes(struct Process processes[], int n) {
    float total_waiting_time = 0, total_turnaround_time = 0;
    for (int i = 0; i < n; i++) {
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }
    printf("\nAverage Waiting Time = %.2f", total_waiting_time / n);
    printf("\nAverage Turnaround Time = %.2f\n", total_turnaround_time / n);
}
void display(struct Process processes[], int n) {
    printf("\nProcess ID | Burst Time | Waiting Time | Turnaround Time | Completion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d          | %d          | %d            | %d               | %d\n",
            processes[i].id,
            processes[i].burst_time,
            processes[i].waiting_time,
            processes[i].turnaround_time,
            processes[i].completion_time);
    }
}

int main() {
    struct Process processes[MAX];
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter burst time for process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
        processes[i].waiting_time = 0;
        processes[i].turnaround_time = 0;
        processes[i].completion_time = 0;
    }
    findWaitingTime(processes, n, quantum);
    findTurnaroundTime(processes, n);
    display(processes, n);
    findAverageTimes(processes, n);
    return 0;
}
